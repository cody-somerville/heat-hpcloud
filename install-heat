#!/bin/bash

set -e

DATABASE_PASSWORD="moofoo"
RABBITMQ_PASSWORD="notset"
REGION="az-1.region-a.geo-1"
AUTH_URL="https://region-a.geo-1.identity.hpcloudsvc.com:35357/v2.0/"

if [ -e "localrc" ]
then
    echo " * Loading local configuration from 'localrc'..."
    source localrc
else
    echo " * No localrc is detected... "
fi

echo " * Region will be set to '${REGION}'..."
echo " * Auth URL will be set to '${AUTH_URL}'..."

sleep 3

echo
echo "=== Installing Heat ==="
echo

echo " * Fetching necessary information..."
PUBLIC_IP="$(curl http://169.254.169.254/latest/meta-data/public-ipv4 2> /dev/null)"

echo " * Preseeding mysql server configuration..."
cat << MYSQL_PRESEED | sudo debconf-set-selections
mysql-server mysql-server/root_password password ${DATABASE_PASSWORD}
mysql-server mysql-server/root_password_again password ${DATABASE_PASSWORD}
mysql-server mysql-server/start_on_boot boolean true
MYSQL_PRESEED

echo " * Installing packages including rabbitmq-server and mysql-server..."
sudo apt-get --quiet update
sudo apt-get --quiet --assume-yes install \
 python-setuptools \
 python-eventlet \
 python-greenlet \
 python-httplib2 \
 python-iso8601 \
 python-lxml \
 python-sqlalchemy \
 python-paste \
 python-routes \
 python-webob \
 python-yaml \
 python-mysqldb \
 python-dev \
 python-pip \
 git-core \
 python-setuptools \
 gcc \
 libc6-dev \
 libxml2-dev \
 libxslt-dev \
 libz-dev \
 python-prettytable \
 mysql-server \
 rabbitmq-server

echo " * Updating rabbitmq password..."
sudo rabbitmqctl change_password guest "${RABBITMQ_PASSWORD}"

echo " * Downloading heat..."
if [ -d heat/.git ] ; then
  pushd heat
  git stash
  git pull
  popd
else
  git clone --quiet git://github.com/openstack/heat.git
fi
cd heat
echo " * Installing additional python dependencies..."
#XXX: Work around 'TypeError: dist must be a Distribution instance'.
sudo pip install --quiet requests==1.2.2
sudo pip install --quiet -r requirements.txt
echo " * Installing heat package in 'developer mode'..."
sudo python setup.py develop --quiet
sudo pip install --quiet python-heatclient

echo " * Patching heat to run against HP Cloud..."
git apply << EOF
diff --git a/heat/engine/clients.py b/heat/engine/clients.py
index 85d0934..2d83150 100644
--- a/heat/engine/clients.py
+++ b/heat/engine/clients.py
@@ -49,7 +49,10 @@ except ImportError:
 cloud_opts = [
     cfg.StrOpt('cloud_backend',
                default=None,
-               help="Cloud module to use as a backend. Defaults to OpenStack.")
+               help="Cloud module to use as a backend. Defaults to OpenStack."),
+    cfg.StrOpt('region',
+               default=None,
+               help="Use only this region if specified.")
 ]
 cfg.CONF.register_opts(cloud_opts)
 
@@ -79,6 +82,8 @@ class OpenStackClients(object):
             return self._keystone
 
         self._keystone = hkc.KeystoneClient(self.context)
+        # Hack: This will make keystone return endpoints for the configured region.
+        self._keystone.client_v2.auth_ref.service_catalog.region_name = cfg.CONF.region
         return self._keystone
 
     def url_for(self, **kwargs):
EOF

echo " * Installing heat configuration files into '/etc/heat/'..."
sudo cp -r etc/heat /etc/
sudo chown -R `whoami` /etc/heat

echo " * Updating heat configuration files..."
cat > /etc/heat/heat.conf << EOF
[DEFAULT]
rabbit_password = ${RABBITMQ_PASSWORD}
auth_encryption_key = $(hexdump -n 16 -v -e '/1 "%02x"' /dev/random)
heat_metadata_server_url = http://${PUBLIC_IP}:8000
heat_waitcondition_server_url = http://${PUBLIC_IP}:8000/v1/waitcondition
heat_watch_server_url = http://${PUBLIC_IP}:8003
region = ${REGION}
sql_connection = mysql://heat:heat@localhost/heat
verbose = True
log_dir = /var/log/heat/

[keystone_authtoken]
auth_uri = ${AUTH_URL}

[paste_deploy]
flavor = standalone
EOF

echo " * Creating log directory at '/var/log/heat/'..."
sudo mkdir -p /var/log/heat/

echo " * Setting up heat database..."
sudo bin/heat-db-setup deb -r "${DATABASE_PASSWORD}"

sudo chown -R `whoami` /var/log/heat

echo
echo "Now starting heat in the background..."
heat-engine &> /dev/null &
heat-api &> /dev/null &
echo
echo "heat-engine pid: $(pidof -x heat-engine)"
echo "heat-api pid: $(pidof -x heat-api)"
echo "heat logs: /var/log/heat"
echo
echo "To take full advantage of heat, having an image with heat-cfntools is"
echo "important. You can either create an image with it included and ask"
echo "support to upload it for you OR more easily you can boot an instace,"
echo "pip install heat-cfntools, and then create a snapshot from the running"
echo "instance."
echo
echo "Unfortunately, most heat templates will not work with hpcloud due"
echo "to not having the instace flavours or images they expect. They can"
echo "however be easily updated to work successfully. You can find some"
echo "example templates that will work under the templates directory."
echo
echo "To see what patches have been applied to make heat work with hpcloud,"
echo "you can run 'git diff' on the heat directory."
echo
echo "To access heat, export HEAT_URL=http://${PUBLIC_IP}:8004/v1/\${OS_TENANT_ID}"
echo " -- \${OS_TENANT_ID} should be replaced with your tenant ID."
echo "Newer versions of heat client also require: export OS_NO_CLIENT_AUTH=1"
echo
